import tensorflow as tf
import numpy as np
import sys
sys.path.append("/home/therwig/data/sandbox/hgcal/Ecoder/")
import ot_tf
import ot
#tf.compat.v1.disable_eager_execution()

def main():

    na=48
    nb=48
    reg=0.5
    a = tf.expand_dims(tf.ones(shape=(na,)) / na, axis=1)  # (na, 1)
    b = tf.expand_dims(tf.ones(shape=(nb,)) / nb, axis=1)  # (nb, 1)
    m = tf.constant( hexMetric(), tf.float32 )
    tf_sinkhorn_loss = ot_tf.sink(a, b, m, (na, nb), reg)

    # print('finish loads')
    # print(a)
    # print(b)
    # print(m)
    print(tf_sinkhorn_loss)

    x = tf.ones(shape=(100,48,1,))
    y = tf.split(x,num_or_size_splits=100,axis=0)
    print(y[0])

    return


hexCoords = np.array([ 
    [0.0, 0.0], [0.0, -2.4168015], [0.0, -4.833603], [0.0, -7.2504044], 
    [2.09301, -1.2083969], [2.09301, -3.6251984], [2.09301, -6.042], [2.09301, -8.458794], 
    [4.18602, -2.4168015], [4.18602, -4.833603], [4.18602, -7.2504044], [4.18602, -9.667198], 
    [6.27903, -3.6251984], [6.27903, -6.042], [6.27903, -8.458794], [6.27903, -10.875603], 
    [-8.37204, -10.271393], [-6.27903, -9.063004], [-4.18602, -7.854599], [-2.0930138, -6.6461945], 
    [-8.37204, -7.854599], [-6.27903, -6.6461945], [-4.18602, -5.4377975], [-2.0930138, -4.229393], 
    [-8.37204, -5.4377975], [-6.27903, -4.229393], [-4.18602, -3.020996], [-2.0930138, -1.8125992], 
    [-8.37204, -3.020996], [-6.27903, -1.8125992], [-4.18602, -0.6042023], [-2.0930138, 0.6042023], 
    [4.7092705, -12.386101], [2.6162605, -11.177696], [0.5232506, -9.969299], [-1.5697594, -8.760895], 
    [2.6162605, -13.594498], [0.5232506, -12.386101], [-1.5697594, -11.177696], [-3.6627693, -9.969299], 
    [0.5232506, -14.802895], [-1.5697594, -13.594498], [-3.6627693, -12.386101], [-5.7557793, -11.177696], 
    [-1.5697594, -16.0113], [-3.6627693, -14.802895], [-5.7557793, -13.594498], [-7.848793, -12.386101]])
def hexMetric():
    return ot.dist(hexCoords, hexCoords, 'euclidean')

if __name__== "__main__":
    main()
